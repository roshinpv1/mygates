{
  "summary": {
    "total_matches": 39,
    "test_directory": "test_metadata_sample",
    "analysis_timestamp": "1751110761.8370245",
    "enhanced_metadata_fields": [
      "file",
      "relative_path",
      "file_name",
      "file_extension",
      "file_size",
      "file_modified",
      "line_number",
      "column_start",
      "column_end",
      "matched_text",
      "full_line",
      "pattern",
      "pattern_type",
      "context_lines",
      "context_start_line",
      "context_end_line",
      "function_context",
      "severity",
      "category",
      "language",
      "gate_type",
      "line_length",
      "indentation_level",
      "is_comment",
      "is_string_literal",
      "suggested_fix",
      "documentation_link",
      "priority"
    ]
  },
  "matches": [
    {
      "file": "test_metadata_sample/user_service.py",
      "relative_path": "user_service.py",
      "file_name": "user_service.py",
      "file_extension": ".py",
      "file_size": 1557,
      "file_modified": 1751113127.9859138,
      "line_number": 7,
      "column_start": 22,
      "column_end": 49,
      "matched_text": "logging.getLogger(__name__)",
      "full_line": "self.logger = logging.getLogger(__name__)",
      "pattern": "logging\\.\\w+\\s*\\([^)]*(?i).*name([_\\-]?[a-z0-9]*)?.*[^)]*\\)",
      "pattern_type": "logging",
      "context_lines": [
        "",
        "class UserService:",
        "    def __init__(self):",
        "        self.logger = logging.getLogger(__name__)",
        "        ",
        "    def authenticate_user(self, username, password):",
        "        # TODO: Implement proper password hashing"
      ],
      "context_start_line": 4,
      "context_end_line": 10,
      "function_context": {
        "function_name": "__init__",
        "function_line": 6,
        "function_signature": "def __init__(self):",
        "distance_from_function": 1
      },
      "severity": "LOW",
      "category": "logging",
      "language": "python",
      "gate_type": "SecretLogs",
      "line_length": 49,
      "indentation_level": 8,
      "is_comment": false,
      "is_string_literal": false,
      "suggested_fix": "Consider using structured logging with appropriate log levels.",
      "documentation_link": "https://docs.example.com/logging-best-practices",
      "priority": 2
    },
    {
      "file": "test_metadata_sample/user_service.py",
      "relative_path": "user_service.py",
      "file_name": "user_service.py",
      "file_extension": ".py",
      "file_size": 1557,
      "file_modified": 1751113127.9859138,
      "line_number": 11,
      "column_start": 13,
      "column_end": 60,
      "matched_text": "logger.info(f\"Authenticating user: {username}\")",
      "full_line": "self.logger.info(f\"Authenticating user: {username}\")",
      "pattern": "logger\\.\\w+\\s*\\([^)]*(?i).*user([_\\-]?[a-z0-9]*)?.*[^)]*\\)",
      "pattern_type": "logging",
      "context_lines": [
        "        ",
        "    def authenticate_user(self, username, password):",
        "        # TODO: Implement proper password hashing",
        "        self.logger.info(f\"Authenticating user: {username}\")",
        "        ",
        "        try:",
        "            # This is a security issue - logging password!"
      ],
      "context_start_line": 8,
      "context_end_line": 14,
      "function_context": {
        "function_name": "authenticate_user",
        "function_line": 9,
        "function_signature": "def authenticate_user(self, username, password):",
        "distance_from_function": 2
      },
      "severity": "HIGH",
      "category": "logging",
      "language": "python",
      "gate_type": "SecretLogs",
      "line_length": 60,
      "indentation_level": 8,
      "is_comment": false,
      "is_string_literal": false,
      "suggested_fix": "Consider using structured logging with appropriate log levels.",
      "documentation_link": "https://docs.example.com/logging-best-practices",
      "priority": 8
    },
    {
      "file": "test_metadata_sample/user_service.py",
      "relative_path": "user_service.py",
      "file_name": "user_service.py",
      "file_extension": ".py",
      "file_size": 1557,
      "file_modified": 1751113127.9859138,
      "line_number": 11,
      "column_start": 13,
      "column_end": 60,
      "matched_text": "logger.info(f\"Authenticating user: {username}\")",
      "full_line": "self.logger.info(f\"Authenticating user: {username}\")",
      "pattern": "logger\\.\\w+\\s*\\([^)]*(?i).*usernam([_\\-]?[a-z0-9]*)?.*[^)]*\\)",
      "pattern_type": "logging",
      "context_lines": [
        "        ",
        "    def authenticate_user(self, username, password):",
        "        # TODO: Implement proper password hashing",
        "        self.logger.info(f\"Authenticating user: {username}\")",
        "        ",
        "        try:",
        "            # This is a security issue - logging password!"
      ],
      "context_start_line": 8,
      "context_end_line": 14,
      "function_context": {
        "function_name": "authenticate_user",
        "function_line": 9,
        "function_signature": "def authenticate_user(self, username, password):",
        "distance_from_function": 2
      },
      "severity": "HIGH",
      "category": "logging",
      "language": "python",
      "gate_type": "SecretLogs",
      "line_length": 60,
      "indentation_level": 8,
      "is_comment": false,
      "is_string_literal": false,
      "suggested_fix": "Consider using structured logging with appropriate log levels.",
      "documentation_link": "https://docs.example.com/logging-best-practices",
      "priority": 8
    },
    {
      "file": "test_metadata_sample/user_service.py",
      "relative_path": "user_service.py",
      "file_name": "user_service.py",
      "file_extension": ".py",
      "file_size": 1557,
      "file_modified": 1751113127.9859138,
      "line_number": 11,
      "column_start": 13,
      "column_end": 60,
      "matched_text": "logger.info(f\"Authenticating user: {username}\")",
      "full_line": "self.logger.info(f\"Authenticating user: {username}\")",
      "pattern": "logger\\.\\w+\\s*\\([^)]*(?i).*name([_\\-]?[a-z0-9]*)?.*[^)]*\\)",
      "pattern_type": "logging",
      "context_lines": [
        "        ",
        "    def authenticate_user(self, username, password):",
        "        # TODO: Implement proper password hashing",
        "        self.logger.info(f\"Authenticating user: {username}\")",
        "        ",
        "        try:",
        "            # This is a security issue - logging password!"
      ],
      "context_start_line": 8,
      "context_end_line": 14,
      "function_context": {
        "function_name": "authenticate_user",
        "function_line": 9,
        "function_signature": "def authenticate_user(self, username, password):",
        "distance_from_function": 2
      },
      "severity": "HIGH",
      "category": "logging",
      "language": "python",
      "gate_type": "SecretLogs",
      "line_length": 60,
      "indentation_level": 8,
      "is_comment": false,
      "is_string_literal": false,
      "suggested_fix": "Consider using structured logging with appropriate log levels.",
      "documentation_link": "https://docs.example.com/logging-best-practices",
      "priority": 8
    },
    {
      "file": "test_metadata_sample/user_service.py",
      "relative_path": "user_service.py",
      "file_name": "user_service.py",
      "file_extension": ".py",
      "file_size": 1557,
      "file_modified": 1751113127.9859138,
      "line_number": 11,
      "column_start": 13,
      "column_end": 59,
      "matched_text": "logger.info(f\"Authenticating user: {username}\"",
      "full_line": "self.logger.info(f\"Authenticating user: {username}\")",
      "pattern": "log.*[\"\\'].*auth.*[\"\\']",
      "pattern_type": "logging",
      "context_lines": [
        "        ",
        "    def authenticate_user(self, username, password):",
        "        # TODO: Implement proper password hashing",
        "        self.logger.info(f\"Authenticating user: {username}\")",
        "        ",
        "        try:",
        "            # This is a security issue - logging password!"
      ],
      "context_start_line": 8,
      "context_end_line": 14,
      "function_context": {
        "function_name": "authenticate_user",
        "function_line": 9,
        "function_signature": "def authenticate_user(self, username, password):",
        "distance_from_function": 2
      },
      "severity": "HIGH",
      "category": "logging",
      "language": "python",
      "gate_type": "SecretLogs",
      "line_length": 60,
      "indentation_level": 8,
      "is_comment": false,
      "is_string_literal": false,
      "suggested_fix": "Consider using structured logging with appropriate log levels.",
      "documentation_link": "https://docs.example.com/logging-best-practices",
      "priority": 8
    },
    {
      "file": "test_metadata_sample/user_service.py",
      "relative_path": "user_service.py",
      "file_name": "user_service.py",
      "file_extension": ".py",
      "file_size": 1557,
      "file_modified": 1751113127.9859138,
      "line_number": 15,
      "column_start": 17,
      "column_end": 54,
      "matched_text": "logger.debug(f\"Password: {password}\")",
      "full_line": "self.logger.debug(f\"Password: {password}\")",
      "pattern": "logger\\.\\w+\\s*\\([^)]*(?i).*pass([_\\-]?[a-z0-9]*)?.*[^)]*\\)",
      "pattern_type": "logging",
      "context_lines": [
        "        ",
        "        try:",
        "            # This is a security issue - logging password!",
        "            self.logger.debug(f\"Password: {password}\")",
        "            self.logger.error(\"Authentication failed - password mismatch\")",
        "            ",
        "            if username == \"admin\" and password == \"secret123\":"
      ],
      "context_start_line": 12,
      "context_end_line": 18,
      "function_context": {
        "function_name": "authenticate_user",
        "function_line": 9,
        "function_signature": "def authenticate_user(self, username, password):",
        "distance_from_function": 6
      },
      "severity": "HIGH",
      "category": "logging",
      "language": "python",
      "gate_type": "SecretLogs",
      "line_length": 54,
      "indentation_level": 12,
      "is_comment": false,
      "is_string_literal": false,
      "suggested_fix": "Consider using structured logging with appropriate log levels.",
      "documentation_link": "https://docs.example.com/logging-best-practices",
      "priority": 8
    },
    {
      "file": "test_metadata_sample/user_service.py",
      "relative_path": "user_service.py",
      "file_name": "user_service.py",
      "file_extension": ".py",
      "file_size": 1557,
      "file_modified": 1751113127.9859138,
      "line_number": 15,
      "column_start": 17,
      "column_end": 54,
      "matched_text": "logger.debug(f\"Password: {password}\")",
      "full_line": "self.logger.debug(f\"Password: {password}\")",
      "pattern": "logger\\.\\w+\\s*\\([^)]*(?i).*password([_\\-]?[a-z0-9]*)?.*[^)]*\\)",
      "pattern_type": "logging",
      "context_lines": [
        "        ",
        "        try:",
        "            # This is a security issue - logging password!",
        "            self.logger.debug(f\"Password: {password}\")",
        "            self.logger.error(\"Authentication failed - password mismatch\")",
        "            ",
        "            if username == \"admin\" and password == \"secret123\":"
      ],
      "context_start_line": 12,
      "context_end_line": 18,
      "function_context": {
        "function_name": "authenticate_user",
        "function_line": 9,
        "function_signature": "def authenticate_user(self, username, password):",
        "distance_from_function": 6
      },
      "severity": "HIGH",
      "category": "logging",
      "language": "python",
      "gate_type": "SecretLogs",
      "line_length": 54,
      "indentation_level": 12,
      "is_comment": false,
      "is_string_literal": false,
      "suggested_fix": "Remove sensitive data from logs. Use placeholder values or hash sensitive information.",
      "documentation_link": "https://docs.example.com/logging-best-practices",
      "priority": 8
    },
    {
      "file": "test_metadata_sample/user_service.py",
      "relative_path": "user_service.py",
      "file_name": "user_service.py",
      "file_extension": ".py",
      "file_size": 1557,
      "file_modified": 1751113127.9859138,
      "line_number": 15,
      "column_start": 17,
      "column_end": 53,
      "matched_text": "logger.debug(f\"Password: {password}\"",
      "full_line": "self.logger.debug(f\"Password: {password}\")",
      "pattern": "log.*[\"\\'].*password.*[\"\\']",
      "pattern_type": "logging",
      "context_lines": [
        "        ",
        "        try:",
        "            # This is a security issue - logging password!",
        "            self.logger.debug(f\"Password: {password}\")",
        "            self.logger.error(\"Authentication failed - password mismatch\")",
        "            ",
        "            if username == \"admin\" and password == \"secret123\":"
      ],
      "context_start_line": 12,
      "context_end_line": 18,
      "function_context": {
        "function_name": "authenticate_user",
        "function_line": 9,
        "function_signature": "def authenticate_user(self, username, password):",
        "distance_from_function": 6
      },
      "severity": "HIGH",
      "category": "logging",
      "language": "python",
      "gate_type": "SecretLogs",
      "line_length": 54,
      "indentation_level": 12,
      "is_comment": false,
      "is_string_literal": false,
      "suggested_fix": "Remove sensitive data from logs. Use placeholder values or hash sensitive information.",
      "documentation_link": "https://docs.example.com/logging-best-practices",
      "priority": 8
    },
    {
      "file": "test_metadata_sample/user_service.py",
      "relative_path": "user_service.py",
      "file_name": "user_service.py",
      "file_extension": ".py",
      "file_size": 1557,
      "file_modified": 1751113127.9859138,
      "line_number": 16,
      "column_start": 17,
      "column_end": 74,
      "matched_text": "logger.error(\"Authentication failed - password mismatch\")",
      "full_line": "self.logger.error(\"Authentication failed - password mismatch\")",
      "pattern": "logger\\.\\w+\\s*\\([^)]*(?i).*pass([_\\-]?[a-z0-9]*)?.*[^)]*\\)",
      "pattern_type": "logging",
      "context_lines": [
        "        try:",
        "            # This is a security issue - logging password!",
        "            self.logger.debug(f\"Password: {password}\")",
        "            self.logger.error(\"Authentication failed - password mismatch\")",
        "            ",
        "            if username == \"admin\" and password == \"secret123\":",
        "                self.logger.info(\"Authentication successful\")"
      ],
      "context_start_line": 13,
      "context_end_line": 19,
      "function_context": {
        "function_name": "authenticate_user",
        "function_line": 9,
        "function_signature": "def authenticate_user(self, username, password):",
        "distance_from_function": 7
      },
      "severity": "HIGH",
      "category": "logging_error",
      "language": "python",
      "gate_type": "SecretLogs",
      "line_length": 74,
      "indentation_level": 12,
      "is_comment": false,
      "is_string_literal": false,
      "suggested_fix": "Consider using structured logging with appropriate log levels.",
      "documentation_link": "https://docs.example.com/logging-best-practices",
      "priority": 8
    },
    {
      "file": "test_metadata_sample/user_service.py",
      "relative_path": "user_service.py",
      "file_name": "user_service.py",
      "file_extension": ".py",
      "file_size": 1557,
      "file_modified": 1751113127.9859138,
      "line_number": 16,
      "column_start": 17,
      "column_end": 74,
      "matched_text": "logger.error(\"Authentication failed - password mismatch\")",
      "full_line": "self.logger.error(\"Authentication failed - password mismatch\")",
      "pattern": "logger\\.\\w+\\s*\\([^)]*(?i).*password([_\\-]?[a-z0-9]*)?.*[^)]*\\)",
      "pattern_type": "logging",
      "context_lines": [
        "        try:",
        "            # This is a security issue - logging password!",
        "            self.logger.debug(f\"Password: {password}\")",
        "            self.logger.error(\"Authentication failed - password mismatch\")",
        "            ",
        "            if username == \"admin\" and password == \"secret123\":",
        "                self.logger.info(\"Authentication successful\")"
      ],
      "context_start_line": 13,
      "context_end_line": 19,
      "function_context": {
        "function_name": "authenticate_user",
        "function_line": 9,
        "function_signature": "def authenticate_user(self, username, password):",
        "distance_from_function": 7
      },
      "severity": "HIGH",
      "category": "logging_error",
      "language": "python",
      "gate_type": "SecretLogs",
      "line_length": 74,
      "indentation_level": 12,
      "is_comment": false,
      "is_string_literal": false,
      "suggested_fix": "Remove sensitive data from logs. Use placeholder values or hash sensitive information.",
      "documentation_link": "https://docs.example.com/logging-best-practices",
      "priority": 8
    },
    {
      "file": "test_metadata_sample/user_service.py",
      "relative_path": "user_service.py",
      "file_name": "user_service.py",
      "file_extension": ".py",
      "file_size": 1557,
      "file_modified": 1751113127.9859138,
      "line_number": 16,
      "column_start": 17,
      "column_end": 73,
      "matched_text": "logger.error(\"Authentication failed - password mismatch\"",
      "full_line": "self.logger.error(\"Authentication failed - password mismatch\")",
      "pattern": "log.*[\"\\'].*password.*[\"\\']",
      "pattern_type": "logging",
      "context_lines": [
        "        try:",
        "            # This is a security issue - logging password!",
        "            self.logger.debug(f\"Password: {password}\")",
        "            self.logger.error(\"Authentication failed - password mismatch\")",
        "            ",
        "            if username == \"admin\" and password == \"secret123\":",
        "                self.logger.info(\"Authentication successful\")"
      ],
      "context_start_line": 13,
      "context_end_line": 19,
      "function_context": {
        "function_name": "authenticate_user",
        "function_line": 9,
        "function_signature": "def authenticate_user(self, username, password):",
        "distance_from_function": 7
      },
      "severity": "HIGH",
      "category": "logging_error",
      "language": "python",
      "gate_type": "SecretLogs",
      "line_length": 74,
      "indentation_level": 12,
      "is_comment": false,
      "is_string_literal": false,
      "suggested_fix": "Remove sensitive data from logs. Use placeholder values or hash sensitive information.",
      "documentation_link": "https://docs.example.com/logging-best-practices",
      "priority": 8
    },
    {
      "file": "test_metadata_sample/user_service.py",
      "relative_path": "user_service.py",
      "file_name": "user_service.py",
      "file_extension": ".py",
      "file_size": 1557,
      "file_modified": 1751113127.9859138,
      "line_number": 16,
      "column_start": 17,
      "column_end": 73,
      "matched_text": "logger.error(\"Authentication failed - password mismatch\"",
      "full_line": "self.logger.error(\"Authentication failed - password mismatch\")",
      "pattern": "log.*[\"\\'].*auth.*[\"\\']",
      "pattern_type": "logging",
      "context_lines": [
        "        try:",
        "            # This is a security issue - logging password!",
        "            self.logger.debug(f\"Password: {password}\")",
        "            self.logger.error(\"Authentication failed - password mismatch\")",
        "            ",
        "            if username == \"admin\" and password == \"secret123\":",
        "                self.logger.info(\"Authentication successful\")"
      ],
      "context_start_line": 13,
      "context_end_line": 19,
      "function_context": {
        "function_name": "authenticate_user",
        "function_line": 9,
        "function_signature": "def authenticate_user(self, username, password):",
        "distance_from_function": 7
      },
      "severity": "HIGH",
      "category": "logging_error",
      "language": "python",
      "gate_type": "SecretLogs",
      "line_length": 74,
      "indentation_level": 12,
      "is_comment": false,
      "is_string_literal": false,
      "suggested_fix": "Consider using structured logging with appropriate log levels.",
      "documentation_link": "https://docs.example.com/logging-best-practices",
      "priority": 8
    },
    {
      "file": "test_metadata_sample/user_service.py",
      "relative_path": "user_service.py",
      "file_name": "user_service.py",
      "file_extension": ".py",
      "file_size": 1557,
      "file_modified": 1751113127.9859138,
      "line_number": 19,
      "column_start": 21,
      "column_end": 60,
      "matched_text": "logger.info(\"Authentication successful\"",
      "full_line": "self.logger.info(\"Authentication successful\")",
      "pattern": "log.*[\"\\'].*auth.*[\"\\']",
      "pattern_type": "logging",
      "context_lines": [
        "            self.logger.error(\"Authentication failed - password mismatch\")",
        "            ",
        "            if username == \"admin\" and password == \"secret123\":",
        "                self.logger.info(\"Authentication successful\")",
        "                return True",
        "            else:",
        "                self.logger.error(\"Authentication failed\")"
      ],
      "context_start_line": 16,
      "context_end_line": 22,
      "function_context": {
        "function_name": "authenticate_user",
        "function_line": 9,
        "function_signature": "def authenticate_user(self, username, password):",
        "distance_from_function": 10
      },
      "severity": "HIGH",
      "category": "logging",
      "language": "python",
      "gate_type": "SecretLogs",
      "line_length": 61,
      "indentation_level": 16,
      "is_comment": false,
      "is_string_literal": false,
      "suggested_fix": "Consider using structured logging with appropriate log levels.",
      "documentation_link": "https://docs.example.com/logging-best-practices",
      "priority": 8
    },
    {
      "file": "test_metadata_sample/user_service.py",
      "relative_path": "user_service.py",
      "file_name": "user_service.py",
      "file_extension": ".py",
      "file_size": 1557,
      "file_modified": 1751113127.9859138,
      "line_number": 22,
      "column_start": 21,
      "column_end": 57,
      "matched_text": "logger.error(\"Authentication failed\"",
      "full_line": "self.logger.error(\"Authentication failed\")",
      "pattern": "log.*[\"\\'].*auth.*[\"\\']",
      "pattern_type": "logging",
      "context_lines": [
        "                self.logger.info(\"Authentication successful\")",
        "                return True",
        "            else:",
        "                self.logger.error(\"Authentication failed\")",
        "                return False",
        "                ",
        "        except Exception as e:"
      ],
      "context_start_line": 19,
      "context_end_line": 25,
      "function_context": {
        "function_name": "authenticate_user",
        "function_line": 9,
        "function_signature": "def authenticate_user(self, username, password):",
        "distance_from_function": 13
      },
      "severity": "HIGH",
      "category": "logging_error",
      "language": "python",
      "gate_type": "SecretLogs",
      "line_length": 58,
      "indentation_level": 16,
      "is_comment": false,
      "is_string_literal": false,
      "suggested_fix": "Consider using structured logging with appropriate log levels.",
      "documentation_link": "https://docs.example.com/logging-best-practices",
      "priority": 8
    },
    {
      "file": "test_metadata_sample/user_service.py",
      "relative_path": "user_service.py",
      "file_name": "user_service.py",
      "file_extension": ".py",
      "file_size": 1557,
      "file_modified": 1751113127.9859138,
      "line_number": 26,
      "column_start": 17,
      "column_end": 58,
      "matched_text": "logger.error(f\"Authentication error: {e}\"",
      "full_line": "self.logger.error(f\"Authentication error: {e}\")",
      "pattern": "log.*[\"\\'].*auth.*[\"\\']",
      "pattern_type": "logging",
      "context_lines": [
        "                return False",
        "                ",
        "        except Exception as e:",
        "            self.logger.error(f\"Authentication error: {e}\")",
        "            raise",
        "    ",
        "    def get_user_data(self, user_id):"
      ],
      "context_start_line": 23,
      "context_end_line": 29,
      "function_context": {
        "function_name": "authenticate_user",
        "function_line": 9,
        "function_signature": "def authenticate_user(self, username, password):",
        "distance_from_function": 17
      },
      "severity": "HIGH",
      "category": "logging_error",
      "language": "python",
      "gate_type": "SecretLogs",
      "line_length": 59,
      "indentation_level": 12,
      "is_comment": false,
      "is_string_literal": false,
      "suggested_fix": "Consider using structured logging with appropriate log levels.",
      "documentation_link": "https://docs.example.com/logging-best-practices",
      "priority": 8
    },
    {
      "file": "test_metadata_sample/auth_controller.js",
      "relative_path": "auth_controller.js",
      "file_name": "auth_controller.js",
      "file_extension": ".js",
      "file_size": 1472,
      "file_modified": 1751113127.985982,
      "line_number": 10,
      "column_start": 8,
      "column_end": 61,
      "matched_text": "console.log('Login attempt with password:', password)",
      "full_line": "console.log('Login attempt with password:', password);",
      "pattern": "console\\.\\w+\\s*\\([^)]*(?i).*pass([_\\-]?[a-z0-9]*)?.*[^)]*\\)",
      "pattern_type": "logging",
      "context_lines": [
        "        const { username, password } = req.body;",
        "        ",
        "        // FIXME: This logs sensitive data",
        "        console.log('Login attempt with password:', password);",
        "        console.error('Failed login for password:', password);",
        "        ",
        "        try {"
      ],
      "context_start_line": 7,
      "context_end_line": 13,
      "function_context": {
        "function_name": "app",
        "function_line": 3,
        "function_signature": "const app = express();",
        "distance_from_function": 7
      },
      "severity": "HIGH",
      "category": "logging",
      "language": "javascript",
      "gate_type": "SecretLogs",
      "line_length": 62,
      "indentation_level": 8,
      "is_comment": false,
      "is_string_literal": false,
      "suggested_fix": "Review this code pattern for compliance with best practices.",
      "documentation_link": "https://docs.example.com/logging-best-practices",
      "priority": 8
    },
    {
      "file": "test_metadata_sample/auth_controller.js",
      "relative_path": "auth_controller.js",
      "file_name": "auth_controller.js",
      "file_extension": ".js",
      "file_size": 1472,
      "file_modified": 1751113127.985982,
      "line_number": 10,
      "column_start": 16,
      "column_end": 61,
      "matched_text": "log('Login attempt with password:', password)",
      "full_line": "console.log('Login attempt with password:', password);",
      "pattern": "log\\s*\\([^)]*(?i).*pass([_\\-]?[a-z0-9]*)?.*[^)]*\\)",
      "pattern_type": "logging",
      "context_lines": [
        "        const { username, password } = req.body;",
        "        ",
        "        // FIXME: This logs sensitive data",
        "        console.log('Login attempt with password:', password);",
        "        console.error('Failed login for password:', password);",
        "        ",
        "        try {"
      ],
      "context_start_line": 7,
      "context_end_line": 13,
      "function_context": {
        "function_name": "app",
        "function_line": 3,
        "function_signature": "const app = express();",
        "distance_from_function": 7
      },
      "severity": "HIGH",
      "category": "logging",
      "language": "javascript",
      "gate_type": "SecretLogs",
      "line_length": 62,
      "indentation_level": 8,
      "is_comment": false,
      "is_string_literal": false,
      "suggested_fix": "Consider using structured logging with appropriate log levels.",
      "documentation_link": "https://docs.example.com/logging-best-practices",
      "priority": 8
    },
    {
      "file": "test_metadata_sample/auth_controller.js",
      "relative_path": "auth_controller.js",
      "file_name": "auth_controller.js",
      "file_extension": ".js",
      "file_size": 1472,
      "file_modified": 1751113127.985982,
      "line_number": 10,
      "column_start": 8,
      "column_end": 61,
      "matched_text": "console.log('Login attempt with password:', password)",
      "full_line": "console.log('Login attempt with password:', password);",
      "pattern": "console\\.\\w+\\s*\\([^)]*(?i).*password([_\\-]?[a-z0-9]*)?.*[^)]*\\)",
      "pattern_type": "logging",
      "context_lines": [
        "        const { username, password } = req.body;",
        "        ",
        "        // FIXME: This logs sensitive data",
        "        console.log('Login attempt with password:', password);",
        "        console.error('Failed login for password:', password);",
        "        ",
        "        try {"
      ],
      "context_start_line": 7,
      "context_end_line": 13,
      "function_context": {
        "function_name": "app",
        "function_line": 3,
        "function_signature": "const app = express();",
        "distance_from_function": 7
      },
      "severity": "HIGH",
      "category": "logging",
      "language": "javascript",
      "gate_type": "SecretLogs",
      "line_length": 62,
      "indentation_level": 8,
      "is_comment": false,
      "is_string_literal": false,
      "suggested_fix": "Remove sensitive data from logs. Use placeholder values or hash sensitive information.",
      "documentation_link": "https://docs.example.com/logging-best-practices",
      "priority": 8
    },
    {
      "file": "test_metadata_sample/auth_controller.js",
      "relative_path": "auth_controller.js",
      "file_name": "auth_controller.js",
      "file_extension": ".js",
      "file_size": 1472,
      "file_modified": 1751113127.985982,
      "line_number": 10,
      "column_start": 16,
      "column_end": 61,
      "matched_text": "log('Login attempt with password:', password)",
      "full_line": "console.log('Login attempt with password:', password);",
      "pattern": "log\\s*\\([^)]*(?i).*password([_\\-]?[a-z0-9]*)?.*[^)]*\\)",
      "pattern_type": "logging",
      "context_lines": [
        "        const { username, password } = req.body;",
        "        ",
        "        // FIXME: This logs sensitive data",
        "        console.log('Login attempt with password:', password);",
        "        console.error('Failed login for password:', password);",
        "        ",
        "        try {"
      ],
      "context_start_line": 7,
      "context_end_line": 13,
      "function_context": {
        "function_name": "app",
        "function_line": 3,
        "function_signature": "const app = express();",
        "distance_from_function": 7
      },
      "severity": "HIGH",
      "category": "logging",
      "language": "javascript",
      "gate_type": "SecretLogs",
      "line_length": 62,
      "indentation_level": 8,
      "is_comment": false,
      "is_string_literal": false,
      "suggested_fix": "Remove sensitive data from logs. Use placeholder values or hash sensitive information.",
      "documentation_link": "https://docs.example.com/logging-best-practices",
      "priority": 8
    },
    {
      "file": "test_metadata_sample/auth_controller.js",
      "relative_path": "auth_controller.js",
      "file_name": "auth_controller.js",
      "file_extension": ".js",
      "file_size": 1472,
      "file_modified": 1751113127.985982,
      "line_number": 10,
      "column_start": 16,
      "column_end": 50,
      "matched_text": "log('Login attempt with password:'",
      "full_line": "console.log('Login attempt with password:', password);",
      "pattern": "log.*[\"\\'].*password.*[\"\\']",
      "pattern_type": "logging",
      "context_lines": [
        "        const { username, password } = req.body;",
        "        ",
        "        // FIXME: This logs sensitive data",
        "        console.log('Login attempt with password:', password);",
        "        console.error('Failed login for password:', password);",
        "        ",
        "        try {"
      ],
      "context_start_line": 7,
      "context_end_line": 13,
      "function_context": {
        "function_name": "app",
        "function_line": 3,
        "function_signature": "const app = express();",
        "distance_from_function": 7
      },
      "severity": "HIGH",
      "category": "logging",
      "language": "javascript",
      "gate_type": "SecretLogs",
      "line_length": 62,
      "indentation_level": 8,
      "is_comment": false,
      "is_string_literal": false,
      "suggested_fix": "Remove sensitive data from logs. Use placeholder values or hash sensitive information.",
      "documentation_link": "https://docs.example.com/logging-best-practices",
      "priority": 8
    },
    {
      "file": "test_metadata_sample/auth_controller.js",
      "relative_path": "auth_controller.js",
      "file_name": "auth_controller.js",
      "file_extension": ".js",
      "file_size": 1472,
      "file_modified": 1751113127.985982,
      "line_number": 10,
      "column_start": 8,
      "column_end": 60,
      "matched_text": "console.log('Login attempt with password:', password",
      "full_line": "console.log('Login attempt with password:', password);",
      "pattern": "console\\.log.*password",
      "pattern_type": "logging",
      "context_lines": [
        "        const { username, password } = req.body;",
        "        ",
        "        // FIXME: This logs sensitive data",
        "        console.log('Login attempt with password:', password);",
        "        console.error('Failed login for password:', password);",
        "        ",
        "        try {"
      ],
      "context_start_line": 7,
      "context_end_line": 13,
      "function_context": {
        "function_name": "app",
        "function_line": 3,
        "function_signature": "const app = express();",
        "distance_from_function": 7
      },
      "severity": "HIGH",
      "category": "logging",
      "language": "javascript",
      "gate_type": "SecretLogs",
      "line_length": 62,
      "indentation_level": 8,
      "is_comment": false,
      "is_string_literal": false,
      "suggested_fix": "Remove sensitive data from logs. Use placeholder values or hash sensitive information.",
      "documentation_link": "https://docs.example.com/logging-best-practices",
      "priority": 8
    },
    {
      "file": "test_metadata_sample/auth_controller.js",
      "relative_path": "auth_controller.js",
      "file_name": "auth_controller.js",
      "file_extension": ".js",
      "file_size": 1472,
      "file_modified": 1751113127.985982,
      "line_number": 11,
      "column_start": 8,
      "column_end": 61,
      "matched_text": "console.error('Failed login for password:', password)",
      "full_line": "console.error('Failed login for password:', password);",
      "pattern": "console\\.\\w+\\s*\\([^)]*(?i).*pass([_\\-]?[a-z0-9]*)?.*[^)]*\\)",
      "pattern_type": "logging",
      "context_lines": [
        "        ",
        "        // FIXME: This logs sensitive data",
        "        console.log('Login attempt with password:', password);",
        "        console.error('Failed login for password:', password);",
        "        ",
        "        try {",
        "            // Simulated authentication"
      ],
      "context_start_line": 8,
      "context_end_line": 14,
      "function_context": {
        "function_name": "app",
        "function_line": 3,
        "function_signature": "const app = express();",
        "distance_from_function": 8
      },
      "severity": "HIGH",
      "category": "logging_error",
      "language": "javascript",
      "gate_type": "SecretLogs",
      "line_length": 62,
      "indentation_level": 8,
      "is_comment": false,
      "is_string_literal": false,
      "suggested_fix": "Review this code pattern for compliance with best practices.",
      "documentation_link": "https://docs.example.com/logging-best-practices",
      "priority": 8
    },
    {
      "file": "test_metadata_sample/auth_controller.js",
      "relative_path": "auth_controller.js",
      "file_name": "auth_controller.js",
      "file_extension": ".js",
      "file_size": 1472,
      "file_modified": 1751113127.985982,
      "line_number": 11,
      "column_start": 8,
      "column_end": 61,
      "matched_text": "console.error('Failed login for password:', password)",
      "full_line": "console.error('Failed login for password:', password);",
      "pattern": "console\\.\\w+\\s*\\([^)]*(?i).*password([_\\-]?[a-z0-9]*)?.*[^)]*\\)",
      "pattern_type": "logging",
      "context_lines": [
        "        ",
        "        // FIXME: This logs sensitive data",
        "        console.log('Login attempt with password:', password);",
        "        console.error('Failed login for password:', password);",
        "        ",
        "        try {",
        "            // Simulated authentication"
      ],
      "context_start_line": 8,
      "context_end_line": 14,
      "function_context": {
        "function_name": "app",
        "function_line": 3,
        "function_signature": "const app = express();",
        "distance_from_function": 8
      },
      "severity": "HIGH",
      "category": "logging_error",
      "language": "javascript",
      "gate_type": "SecretLogs",
      "line_length": 62,
      "indentation_level": 8,
      "is_comment": false,
      "is_string_literal": false,
      "suggested_fix": "Remove sensitive data from logs. Use placeholder values or hash sensitive information.",
      "documentation_link": "https://docs.example.com/logging-best-practices",
      "priority": 8
    },
    {
      "file": "test_metadata_sample/auth_controller.js",
      "relative_path": "auth_controller.js",
      "file_name": "auth_controller.js",
      "file_extension": ".js",
      "file_size": 1472,
      "file_modified": 1751113127.985982,
      "line_number": 16,
      "column_start": 16,
      "column_end": 67,
      "matched_text": "console.log('Login successful for user:', username)",
      "full_line": "console.log('Login successful for user:', username);",
      "pattern": "console\\.\\w+\\s*\\([^)]*(?i).*user([_\\-]?[a-z0-9]*)?.*[^)]*\\)",
      "pattern_type": "logging",
      "context_lines": [
        "        try {",
        "            // Simulated authentication",
        "            if (username === 'admin' && password === 'secret') {",
        "                console.log('Login successful for user:', username);",
        "                res.json({ success: true, token: 'abc123' });",
        "            } else {",
        "                console.error('Login failed for user:', username);"
      ],
      "context_start_line": 13,
      "context_end_line": 19,
      "function_context": {
        "function_name": "app",
        "function_line": 3,
        "function_signature": "const app = express();",
        "distance_from_function": 13
      },
      "severity": "LOW",
      "category": "logging",
      "language": "javascript",
      "gate_type": "SecretLogs",
      "line_length": 68,
      "indentation_level": 16,
      "is_comment": false,
      "is_string_literal": false,
      "suggested_fix": "Review this code pattern for compliance with best practices.",
      "documentation_link": "https://docs.example.com/logging-best-practices",
      "priority": 2
    },
    {
      "file": "test_metadata_sample/auth_controller.js",
      "relative_path": "auth_controller.js",
      "file_name": "auth_controller.js",
      "file_extension": ".js",
      "file_size": 1472,
      "file_modified": 1751113127.985982,
      "line_number": 16,
      "column_start": 24,
      "column_end": 67,
      "matched_text": "log('Login successful for user:', username)",
      "full_line": "console.log('Login successful for user:', username);",
      "pattern": "log\\s*\\([^)]*(?i).*user([_\\-]?[a-z0-9]*)?.*[^)]*\\)",
      "pattern_type": "logging",
      "context_lines": [
        "        try {",
        "            // Simulated authentication",
        "            if (username === 'admin' && password === 'secret') {",
        "                console.log('Login successful for user:', username);",
        "                res.json({ success: true, token: 'abc123' });",
        "            } else {",
        "                console.error('Login failed for user:', username);"
      ],
      "context_start_line": 13,
      "context_end_line": 19,
      "function_context": {
        "function_name": "app",
        "function_line": 3,
        "function_signature": "const app = express();",
        "distance_from_function": 13
      },
      "severity": "LOW",
      "category": "logging",
      "language": "javascript",
      "gate_type": "SecretLogs",
      "line_length": 68,
      "indentation_level": 16,
      "is_comment": false,
      "is_string_literal": false,
      "suggested_fix": "Consider using structured logging with appropriate log levels.",
      "documentation_link": "https://docs.example.com/logging-best-practices",
      "priority": 2
    },
    {
      "file": "test_metadata_sample/auth_controller.js",
      "relative_path": "auth_controller.js",
      "file_name": "auth_controller.js",
      "file_extension": ".js",
      "file_size": 1472,
      "file_modified": 1751113127.985982,
      "line_number": 16,
      "column_start": 16,
      "column_end": 67,
      "matched_text": "console.log('Login successful for user:', username)",
      "full_line": "console.log('Login successful for user:', username);",
      "pattern": "console\\.\\w+\\s*\\([^)]*(?i).*usernam([_\\-]?[a-z0-9]*)?.*[^)]*\\)",
      "pattern_type": "logging",
      "context_lines": [
        "        try {",
        "            // Simulated authentication",
        "            if (username === 'admin' && password === 'secret') {",
        "                console.log('Login successful for user:', username);",
        "                res.json({ success: true, token: 'abc123' });",
        "            } else {",
        "                console.error('Login failed for user:', username);"
      ],
      "context_start_line": 13,
      "context_end_line": 19,
      "function_context": {
        "function_name": "app",
        "function_line": 3,
        "function_signature": "const app = express();",
        "distance_from_function": 13
      },
      "severity": "LOW",
      "category": "logging",
      "language": "javascript",
      "gate_type": "SecretLogs",
      "line_length": 68,
      "indentation_level": 16,
      "is_comment": false,
      "is_string_literal": false,
      "suggested_fix": "Review this code pattern for compliance with best practices.",
      "documentation_link": "https://docs.example.com/logging-best-practices",
      "priority": 2
    },
    {
      "file": "test_metadata_sample/auth_controller.js",
      "relative_path": "auth_controller.js",
      "file_name": "auth_controller.js",
      "file_extension": ".js",
      "file_size": 1472,
      "file_modified": 1751113127.985982,
      "line_number": 16,
      "column_start": 24,
      "column_end": 67,
      "matched_text": "log('Login successful for user:', username)",
      "full_line": "console.log('Login successful for user:', username);",
      "pattern": "log\\s*\\([^)]*(?i).*usernam([_\\-]?[a-z0-9]*)?.*[^)]*\\)",
      "pattern_type": "logging",
      "context_lines": [
        "        try {",
        "            // Simulated authentication",
        "            if (username === 'admin' && password === 'secret') {",
        "                console.log('Login successful for user:', username);",
        "                res.json({ success: true, token: 'abc123' });",
        "            } else {",
        "                console.error('Login failed for user:', username);"
      ],
      "context_start_line": 13,
      "context_end_line": 19,
      "function_context": {
        "function_name": "app",
        "function_line": 3,
        "function_signature": "const app = express();",
        "distance_from_function": 13
      },
      "severity": "LOW",
      "category": "logging",
      "language": "javascript",
      "gate_type": "SecretLogs",
      "line_length": 68,
      "indentation_level": 16,
      "is_comment": false,
      "is_string_literal": false,
      "suggested_fix": "Consider using structured logging with appropriate log levels.",
      "documentation_link": "https://docs.example.com/logging-best-practices",
      "priority": 2
    },
    {
      "file": "test_metadata_sample/auth_controller.js",
      "relative_path": "auth_controller.js",
      "file_name": "auth_controller.js",
      "file_extension": ".js",
      "file_size": 1472,
      "file_modified": 1751113127.985982,
      "line_number": 16,
      "column_start": 16,
      "column_end": 67,
      "matched_text": "console.log('Login successful for user:', username)",
      "full_line": "console.log('Login successful for user:', username);",
      "pattern": "console\\.\\w+\\s*\\([^)]*(?i).*name([_\\-]?[a-z0-9]*)?.*[^)]*\\)",
      "pattern_type": "logging",
      "context_lines": [
        "        try {",
        "            // Simulated authentication",
        "            if (username === 'admin' && password === 'secret') {",
        "                console.log('Login successful for user:', username);",
        "                res.json({ success: true, token: 'abc123' });",
        "            } else {",
        "                console.error('Login failed for user:', username);"
      ],
      "context_start_line": 13,
      "context_end_line": 19,
      "function_context": {
        "function_name": "app",
        "function_line": 3,
        "function_signature": "const app = express();",
        "distance_from_function": 13
      },
      "severity": "LOW",
      "category": "logging",
      "language": "javascript",
      "gate_type": "SecretLogs",
      "line_length": 68,
      "indentation_level": 16,
      "is_comment": false,
      "is_string_literal": false,
      "suggested_fix": "Review this code pattern for compliance with best practices.",
      "documentation_link": "https://docs.example.com/logging-best-practices",
      "priority": 2
    },
    {
      "file": "test_metadata_sample/auth_controller.js",
      "relative_path": "auth_controller.js",
      "file_name": "auth_controller.js",
      "file_extension": ".js",
      "file_size": 1472,
      "file_modified": 1751113127.985982,
      "line_number": 16,
      "column_start": 24,
      "column_end": 67,
      "matched_text": "log('Login successful for user:', username)",
      "full_line": "console.log('Login successful for user:', username);",
      "pattern": "log\\s*\\([^)]*(?i).*name([_\\-]?[a-z0-9]*)?.*[^)]*\\)",
      "pattern_type": "logging",
      "context_lines": [
        "        try {",
        "            // Simulated authentication",
        "            if (username === 'admin' && password === 'secret') {",
        "                console.log('Login successful for user:', username);",
        "                res.json({ success: true, token: 'abc123' });",
        "            } else {",
        "                console.error('Login failed for user:', username);"
      ],
      "context_start_line": 13,
      "context_end_line": 19,
      "function_context": {
        "function_name": "app",
        "function_line": 3,
        "function_signature": "const app = express();",
        "distance_from_function": 13
      },
      "severity": "LOW",
      "category": "logging",
      "language": "javascript",
      "gate_type": "SecretLogs",
      "line_length": 68,
      "indentation_level": 16,
      "is_comment": false,
      "is_string_literal": false,
      "suggested_fix": "Consider using structured logging with appropriate log levels.",
      "documentation_link": "https://docs.example.com/logging-best-practices",
      "priority": 2
    },
    {
      "file": "test_metadata_sample/auth_controller.js",
      "relative_path": "auth_controller.js",
      "file_name": "auth_controller.js",
      "file_extension": ".js",
      "file_size": 1472,
      "file_modified": 1751113127.985982,
      "line_number": 19,
      "column_start": 16,
      "column_end": 65,
      "matched_text": "console.error('Login failed for user:', username)",
      "full_line": "console.error('Login failed for user:', username);",
      "pattern": "console\\.\\w+\\s*\\([^)]*(?i).*user([_\\-]?[a-z0-9]*)?.*[^)]*\\)",
      "pattern_type": "logging",
      "context_lines": [
        "                console.log('Login successful for user:', username);",
        "                res.json({ success: true, token: 'abc123' });",
        "            } else {",
        "                console.error('Login failed for user:', username);",
        "                res.status(401).json({ error: 'Invalid credentials' });",
        "            }",
        "        } catch (error) {"
      ],
      "context_start_line": 16,
      "context_end_line": 22,
      "function_context": {
        "function_name": "app",
        "function_line": 3,
        "function_signature": "const app = express();",
        "distance_from_function": 16
      },
      "severity": "MEDIUM",
      "category": "logging_error",
      "language": "javascript",
      "gate_type": "SecretLogs",
      "line_length": 66,
      "indentation_level": 16,
      "is_comment": false,
      "is_string_literal": false,
      "suggested_fix": "Review this code pattern for compliance with best practices.",
      "documentation_link": "https://docs.example.com/logging-best-practices",
      "priority": 5
    },
    {
      "file": "test_metadata_sample/auth_controller.js",
      "relative_path": "auth_controller.js",
      "file_name": "auth_controller.js",
      "file_extension": ".js",
      "file_size": 1472,
      "file_modified": 1751113127.985982,
      "line_number": 19,
      "column_start": 16,
      "column_end": 65,
      "matched_text": "console.error('Login failed for user:', username)",
      "full_line": "console.error('Login failed for user:', username);",
      "pattern": "console\\.\\w+\\s*\\([^)]*(?i).*usernam([_\\-]?[a-z0-9]*)?.*[^)]*\\)",
      "pattern_type": "logging",
      "context_lines": [
        "                console.log('Login successful for user:', username);",
        "                res.json({ success: true, token: 'abc123' });",
        "            } else {",
        "                console.error('Login failed for user:', username);",
        "                res.status(401).json({ error: 'Invalid credentials' });",
        "            }",
        "        } catch (error) {"
      ],
      "context_start_line": 16,
      "context_end_line": 22,
      "function_context": {
        "function_name": "app",
        "function_line": 3,
        "function_signature": "const app = express();",
        "distance_from_function": 16
      },
      "severity": "MEDIUM",
      "category": "logging_error",
      "language": "javascript",
      "gate_type": "SecretLogs",
      "line_length": 66,
      "indentation_level": 16,
      "is_comment": false,
      "is_string_literal": false,
      "suggested_fix": "Review this code pattern for compliance with best practices.",
      "documentation_link": "https://docs.example.com/logging-best-practices",
      "priority": 5
    },
    {
      "file": "test_metadata_sample/auth_controller.js",
      "relative_path": "auth_controller.js",
      "file_name": "auth_controller.js",
      "file_extension": ".js",
      "file_size": 1472,
      "file_modified": 1751113127.985982,
      "line_number": 19,
      "column_start": 16,
      "column_end": 65,
      "matched_text": "console.error('Login failed for user:', username)",
      "full_line": "console.error('Login failed for user:', username);",
      "pattern": "console\\.\\w+\\s*\\([^)]*(?i).*name([_\\-]?[a-z0-9]*)?.*[^)]*\\)",
      "pattern_type": "logging",
      "context_lines": [
        "                console.log('Login successful for user:', username);",
        "                res.json({ success: true, token: 'abc123' });",
        "            } else {",
        "                console.error('Login failed for user:', username);",
        "                res.status(401).json({ error: 'Invalid credentials' });",
        "            }",
        "        } catch (error) {"
      ],
      "context_start_line": 16,
      "context_end_line": 22,
      "function_context": {
        "function_name": "app",
        "function_line": 3,
        "function_signature": "const app = express();",
        "distance_from_function": 16
      },
      "severity": "MEDIUM",
      "category": "logging_error",
      "language": "javascript",
      "gate_type": "SecretLogs",
      "line_length": 66,
      "indentation_level": 16,
      "is_comment": false,
      "is_string_literal": false,
      "suggested_fix": "Review this code pattern for compliance with best practices.",
      "documentation_link": "https://docs.example.com/logging-best-practices",
      "priority": 5
    },
    {
      "file": "test_metadata_sample/user_service.py",
      "relative_path": "user_service.py",
      "file_name": "user_service.py",
      "file_extension": ".py",
      "file_size": 1557,
      "file_modified": 1751113127.9859138,
      "line_number": 16,
      "column_start": 17,
      "column_end": 30,
      "matched_text": "logger.error(",
      "full_line": "self.logger.error(\"Authentication failed - password mismatch\")",
      "pattern": "logger\\.error\\s*\\(",
      "pattern_type": "logging",
      "context_lines": [
        "        try:",
        "            # This is a security issue - logging password!",
        "            self.logger.debug(f\"Password: {password}\")",
        "            self.logger.error(\"Authentication failed - password mismatch\")",
        "            ",
        "            if username == \"admin\" and password == \"secret123\":",
        "                self.logger.info(\"Authentication successful\")"
      ],
      "context_start_line": 13,
      "context_end_line": 19,
      "function_context": {
        "function_name": "authenticate_user",
        "function_line": 9,
        "function_signature": "def authenticate_user(self, username, password):",
        "distance_from_function": 7
      },
      "severity": "MEDIUM",
      "category": "logging_error",
      "language": "python",
      "gate_type": "ErrorLogs",
      "line_length": 74,
      "indentation_level": 12,
      "is_comment": false,
      "is_string_literal": false,
      "suggested_fix": "Review this code pattern for compliance with best practices.",
      "documentation_link": "https://docs.example.com/logging-best-practices",
      "priority": 5
    },
    {
      "file": "test_metadata_sample/user_service.py",
      "relative_path": "user_service.py",
      "file_name": "user_service.py",
      "file_extension": ".py",
      "file_size": 1557,
      "file_modified": 1751113127.9859138,
      "line_number": 22,
      "column_start": 21,
      "column_end": 34,
      "matched_text": "logger.error(",
      "full_line": "self.logger.error(\"Authentication failed\")",
      "pattern": "logger\\.error\\s*\\(",
      "pattern_type": "logging",
      "context_lines": [
        "                self.logger.info(\"Authentication successful\")",
        "                return True",
        "            else:",
        "                self.logger.error(\"Authentication failed\")",
        "                return False",
        "                ",
        "        except Exception as e:"
      ],
      "context_start_line": 19,
      "context_end_line": 25,
      "function_context": {
        "function_name": "authenticate_user",
        "function_line": 9,
        "function_signature": "def authenticate_user(self, username, password):",
        "distance_from_function": 13
      },
      "severity": "MEDIUM",
      "category": "logging_error",
      "language": "python",
      "gate_type": "ErrorLogs",
      "line_length": 58,
      "indentation_level": 16,
      "is_comment": false,
      "is_string_literal": false,
      "suggested_fix": "Review this code pattern for compliance with best practices.",
      "documentation_link": "https://docs.example.com/logging-best-practices",
      "priority": 5
    },
    {
      "file": "test_metadata_sample/user_service.py",
      "relative_path": "user_service.py",
      "file_name": "user_service.py",
      "file_extension": ".py",
      "file_size": 1557,
      "file_modified": 1751113127.9859138,
      "line_number": 26,
      "column_start": 17,
      "column_end": 30,
      "matched_text": "logger.error(",
      "full_line": "self.logger.error(f\"Authentication error: {e}\")",
      "pattern": "logger\\.error\\s*\\(",
      "pattern_type": "logging",
      "context_lines": [
        "                return False",
        "                ",
        "        except Exception as e:",
        "            self.logger.error(f\"Authentication error: {e}\")",
        "            raise",
        "    ",
        "    def get_user_data(self, user_id):"
      ],
      "context_start_line": 23,
      "context_end_line": 29,
      "function_context": {
        "function_name": "authenticate_user",
        "function_line": 9,
        "function_signature": "def authenticate_user(self, username, password):",
        "distance_from_function": 17
      },
      "severity": "MEDIUM",
      "category": "logging_error",
      "language": "python",
      "gate_type": "ErrorLogs",
      "line_length": 59,
      "indentation_level": 12,
      "is_comment": false,
      "is_string_literal": false,
      "suggested_fix": "Review this code pattern for compliance with best practices.",
      "documentation_link": "https://docs.example.com/logging-best-practices",
      "priority": 5
    },
    {
      "file": "test_metadata_sample/user_service.py",
      "relative_path": "user_service.py",
      "file_name": "user_service.py",
      "file_extension": ".py",
      "file_size": 1557,
      "file_modified": 1751113127.9859138,
      "line_number": 39,
      "column_start": 17,
      "column_end": 30,
      "matched_text": "logger.error(",
      "full_line": "self.logger.error(f\"Database error: {e}\")",
      "pattern": "logger\\.error\\s*\\(",
      "pattern_type": "logging",
      "context_lines": [
        "            ",
        "        except Exception as e:",
        "            print(f\"Database error: {e}\")",
        "            self.logger.error(f\"Database error: {e}\")",
        "            return None",
        "",
        "def main():"
      ],
      "context_start_line": 36,
      "context_end_line": 42,
      "function_context": {
        "function_name": "get_user_data",
        "function_line": 29,
        "function_signature": "def get_user_data(self, user_id):",
        "distance_from_function": 10
      },
      "severity": "MEDIUM",
      "category": "logging_error",
      "language": "python",
      "gate_type": "ErrorLogs",
      "line_length": 53,
      "indentation_level": 12,
      "is_comment": false,
      "is_string_literal": false,
      "suggested_fix": "Review this code pattern for compliance with best practices.",
      "documentation_link": "https://docs.example.com/logging-best-practices",
      "priority": 5
    },
    {
      "file": "test_metadata_sample/auth_controller.js",
      "relative_path": "auth_controller.js",
      "file_name": "auth_controller.js",
      "file_extension": ".js",
      "file_size": 1472,
      "file_modified": 1751113127.985982,
      "line_number": 11,
      "column_start": 8,
      "column_end": 22,
      "matched_text": "console.error(",
      "full_line": "console.error('Failed login for password:', password);",
      "pattern": "console\\.error\\s*\\(",
      "pattern_type": "logging",
      "context_lines": [
        "        ",
        "        // FIXME: This logs sensitive data",
        "        console.log('Login attempt with password:', password);",
        "        console.error('Failed login for password:', password);",
        "        ",
        "        try {",
        "            // Simulated authentication"
      ],
      "context_start_line": 8,
      "context_end_line": 14,
      "function_context": {
        "function_name": "app",
        "function_line": 3,
        "function_signature": "const app = express();",
        "distance_from_function": 8
      },
      "severity": "MEDIUM",
      "category": "logging_error",
      "language": "javascript",
      "gate_type": "ErrorLogs",
      "line_length": 62,
      "indentation_level": 8,
      "is_comment": false,
      "is_string_literal": false,
      "suggested_fix": "Review this code pattern for compliance with best practices.",
      "documentation_link": "https://docs.example.com/logging-best-practices",
      "priority": 5
    },
    {
      "file": "test_metadata_sample/auth_controller.js",
      "relative_path": "auth_controller.js",
      "file_name": "auth_controller.js",
      "file_extension": ".js",
      "file_size": 1472,
      "file_modified": 1751113127.985982,
      "line_number": 19,
      "column_start": 16,
      "column_end": 30,
      "matched_text": "console.error(",
      "full_line": "console.error('Login failed for user:', username);",
      "pattern": "console\\.error\\s*\\(",
      "pattern_type": "logging",
      "context_lines": [
        "                console.log('Login successful for user:', username);",
        "                res.json({ success: true, token: 'abc123' });",
        "            } else {",
        "                console.error('Login failed for user:', username);",
        "                res.status(401).json({ error: 'Invalid credentials' });",
        "            }",
        "        } catch (error) {"
      ],
      "context_start_line": 16,
      "context_end_line": 22,
      "function_context": {
        "function_name": "app",
        "function_line": 3,
        "function_signature": "const app = express();",
        "distance_from_function": 16
      },
      "severity": "MEDIUM",
      "category": "logging_error",
      "language": "javascript",
      "gate_type": "ErrorLogs",
      "line_length": 66,
      "indentation_level": 16,
      "is_comment": false,
      "is_string_literal": false,
      "suggested_fix": "Review this code pattern for compliance with best practices.",
      "documentation_link": "https://docs.example.com/logging-best-practices",
      "priority": 5
    },
    {
      "file": "test_metadata_sample/auth_controller.js",
      "relative_path": "auth_controller.js",
      "file_name": "auth_controller.js",
      "file_extension": ".js",
      "file_size": 1472,
      "file_modified": 1751113127.985982,
      "line_number": 23,
      "column_start": 12,
      "column_end": 26,
      "matched_text": "console.error(",
      "full_line": "console.error('Authentication error:', error);",
      "pattern": "console\\.error\\s*\\(",
      "pattern_type": "logging",
      "context_lines": [
        "                res.status(401).json({ error: 'Invalid credentials' });",
        "            }",
        "        } catch (error) {",
        "            console.error('Authentication error:', error);",
        "            res.status(500).json({ error: 'Internal server error' });",
        "        }",
        "    }"
      ],
      "context_start_line": 20,
      "context_end_line": 26,
      "function_context": {
        "function_name": "app",
        "function_line": 3,
        "function_signature": "const app = express();",
        "distance_from_function": 20
      },
      "severity": "MEDIUM",
      "category": "logging_error",
      "language": "javascript",
      "gate_type": "ErrorLogs",
      "line_length": 58,
      "indentation_level": 12,
      "is_comment": false,
      "is_string_literal": false,
      "suggested_fix": "Review this code pattern for compliance with best practices.",
      "documentation_link": "https://docs.example.com/logging-best-practices",
      "priority": 5
    }
  ]
}